<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Lucids]]></title>
  <link href="http://lucids.github.io/atom.xml" rel="self"/>
  <link href="http://lucids.github.io/"/>
  <updated>2014-02-16T22:28:24+00:00</updated>
  <id>http://lucids.github.io/</id>
  <author>
    <name><![CDATA[Lucids]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (04)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-04/"/>
    <updated>2014-02-15T21:28:07+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-04</id>
    <content type="html"><![CDATA[<p>On Reading SICP (04)</p>

<h3>About</h3>

<p>From page 48 to page 66.</p>

<p>From exercise 1.29 to exercise 1.34.</p>

<h3>Notes</h3>

<p>I like this section, the notion of <code>accumulation</code> and <code>filter</code> is introduced, which are my favourite functional programming tools.</p>

<p>Also, the idea, that <code>let</code> is syntactical sugar of <code>lambda</code>, is pretty interesting.</p>

<figure class='code'><figcaption><span>let and lambda</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">var1</span> <span class="nv">exp1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">var2</span> <span class="nv">exp2</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="p">(</span><span class="nf">varn</span> <span class="nv">expn</span><span class="p">))</span>
</span><span class='line'><span class="nv">body</span><span class="p">)</span>
</span><span class='line'><span class="c1">; is the equivalent of</span>
</span><span class='line'><span class="p">((</span><span class="k">lambda </span><span class="p">(</span><span class="nf">var1</span> <span class="nv">var2</span> <span class="o">...</span> <span class="nv">varn</span><span class="p">)</span> <span class="nv">body</span><span class="p">)</span>
</span><span class='line'><span class="nv">exp1</span>
</span><span class='line'><span class="nv">exp2</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="nv">expn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exercises</h3>

<h4>1.29</h4>

<p>In order to reuse <code>sum</code>, I define <code>fk</code>, which may be a little weird.</p>

<figure class='code'><figcaption><span>program</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sum</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">sum</span> <span class="nv">term</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">square</span> <span class="nv">x</span><span class="p">)(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">integral</span> <span class="nv">f</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">dx</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">add-dx</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">dx</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">sum</span> <span class="nv">f</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">dx</span> <span class="mf">2.0</span><span class="p">))</span> <span class="nv">add-dx</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">dx</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">simpson-integral</span> <span class="nv">f</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">h</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">b</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">yk</span> <span class="nv">k</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="p">(</span><span class="nb">* </span><span class="nv">k</span> <span class="nv">h</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">inc</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fk</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">cond</span>
</span><span class='line'><span class="p">((</span><span class="nb">= </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">a</span><span class="p">))</span>
</span><span class='line'><span class="p">((</span><span class="nb">= </span><span class="nv">x</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">b</span><span class="p">))</span>
</span><span class='line'><span class="p">((</span><span class="nb">even? </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nf">yk</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nf">yk</span> <span class="nv">x</span><span class="p">))))))</span>
</span><span class='line'><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">sum</span> <span class="nv">fk</span> <span class="mi">0</span> <span class="nv">inc</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">b</span> <span class="nv">a</span><span class="p">)</span> <span class="mf">3.0</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It`s more precise indeed, wow!</p>

<figure class='code'><figcaption><span>comparison</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">simpson-integral</span> <span class="nv">square</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="mf">0.3333333333333333</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">integral</span> <span class="nv">square</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'><span class="mf">0.33332500000000054</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.30</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sum</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">result</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">result</span> <span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.31</h4>

<p>It can be generated by <code>s/+/*/ s/0/1/ s/sum/prod/</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">prod-rec</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="mi">1</span>
</span><span class='line'><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">prod-rec</span> <span class="nv">term</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">prod-iter</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">result</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">result</span> <span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sample output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">prod-rec</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="mi">120</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">prod-iter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="mi">120</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.32</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">accum-rec</span> <span class="nv">op</span> <span class="nv">init</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">init</span>
</span><span class='line'><span class="p">(</span><span class="nf">op</span> <span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">accum-rec</span> <span class="nv">op</span> <span class="nv">init</span> <span class="nv">term</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">accum-iter</span> <span class="nv">op</span> <span class="nv">init</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">result</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">op</span> <span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">result</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">init</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sample output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">accum-rec</span> <span class="nv">+</span> <span class="mi">0</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span><span class="p">))</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">55</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">accum-iter</span> <span class="nv">+</span> <span class="mi">0</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span><span class="p">))</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">55</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.33</h4>

<p>Finally I don`t have to write recursive and iterative version at once.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">filtered-accum</span> <span class="nv">op</span> <span class="nv">init</span> <span class="nv">term</span> <span class="nv">a</span> <span class="nv">next</span> <span class="nv">b</span> <span class="nv">filter</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">&gt; </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'><span class="p">((</span><span class="nf">filter</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">op</span> <span class="p">(</span><span class="nf">term</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">result</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">result</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">init</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sample output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">filtered-accum</span> <span class="nv">+</span> <span class="mi">0</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="mi">10</span> <span class="nv">even?</span><span class="p">)</span>
</span><span class='line'><span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sum of the squares of the prime numbers in the interval a to b</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sum-prime-squares</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">filtered-accum</span>
</span><span class='line'><span class="nv">+</span> <span class="mi">0</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">))</span> <span class="nv">a</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">b</span> <span class="nv">prime?</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>product of all positive integers i < n such that GCD(i, n) = 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">prod-relative-primes-less-than</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">filtered-accum</span>
</span><span class='line'><span class="nv">*</span> <span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">gcd </span><span class="nv">x</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sample output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">sum-prime-squares</span> <span class="mi">1</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">87</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">prod-relative-primes-less-than</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="mi">189</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.34</h4>

<p>Given</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">f</span> <span class="nv">g</span><span class="p">)</span> <span class="p">(</span><span class="nf">g</span> <span class="mi">2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>which <code>f</code> would receive a function <code>g</code> then return the result that apply <code>g</code> with <code>2</code>.</p>

<p>Since scheme uses applicative-order evaluation, I think <code>(f f)</code> would become <code>(f 2)</code> then <code>(2 2)</code>, since <code>2</code> is a number instead of a function, it would pop up an error here.</p>

<p>Then my thought was proved :)</p>

<figure class='code'><figcaption><span>experiment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">f</span> <span class="nv">g</span><span class="p">)</span> <span class="p">(</span><span class="nf">g</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">f</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="nv">application:</span> <span class="nv">not</span> <span class="nv">a</span> <span class="nv">procedure</span><span class="c1">;</span>
</span><span class='line'><span class="nv">expected</span> <span class="nv">a</span> <span class="nv">procedure</span> <span class="nv">that</span> <span class="nv">can</span> <span class="nv">be</span> <span class="nv">applied</span> <span class="nv">to</span> <span class="nv">arguments</span>
</span><span class='line'><span class="nv">given:</span> <span class="mi">2</span>
</span><span class='line'><span class="nv">arguments</span><span class="o">...</span><span class="nv">:</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (03)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-03/"/>
    <updated>2014-01-20T23:45:15+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-03</id>
    <content type="html"><![CDATA[<p>On Reading SICP (03)</p>

<h3>About</h3>

<p>From page 48 to page 56.</p>

<p>From exercise 1.19 to exercise 1.28.</p>

<h3>Notes</h3>

<p>This part is a little boring, since I don&rsquo;t like fiddling with numbers.</p>

<p>I wrote exercise solutions in <a href="http://racket-lang.org/">DrRacket</a>, then I found some functions missing(like <code>runtime</code>), fortunately there is a SICP-specific racket package called <a href="http://www.neilvandyke.org/racket-sicp/">Racket Sicp</a>, many thanks to PLaneT.</p>

<h3>Exercises</h3>

<h4>1.20</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nb">gcd </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">b</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">a</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">gcd </span><span class="nv">b</span> <span class="p">(</span><span class="nb">remainder </span><span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normal-order evaluation won&rsquo;t fully unwarp expression until all operation become primitive, so <code>remainder</code> will be called mannnnnny times.</p>

<figure class='code'><figcaption><span>(gcd 206 40)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="c1">; normal-order evaluation</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="p">(</span><span class="nb">remainder </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">))</span> <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)))</span> <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">remainder </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">))</span> <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">40</span> <span class="p">(</span><span class="nb">remainder </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">2</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; applicative-order evaluation</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">206</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">40</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">6</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">4</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">gcd </span><span class="mi">2</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.21</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">smallest-divisor</span> <span class="mi">19</span><span class="p">)</span>
</span><span class='line'><span class="mi">19</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">smallest-divisor</span> <span class="mi">199</span><span class="p">)</span>
</span><span class='line'><span class="mi">199</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">smallest-divisor</span> <span class="mi">1999</span><span class="p">)</span>
</span><span class='line'><span class="mi">1999</span>
</span><span class='line'><span class="c1">; which give me an illusion that all 199..9 are primes, but...</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">smallest-divisor</span> <span class="mi">19999</span><span class="p">)</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="c1">; never trust your intutions, especially on maths.</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.22</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">search-for-primes</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-odd</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">odd? </span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">n</span> <span class="nv">rest</span> <span class="nv">start-time</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">rest</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">runtime</span><span class="p">)</span> <span class="nv">start-time</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">prime?</span> <span class="nv">n</span><span class="p">)</span>  <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">display </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next-odd</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">rest</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">start-time</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nf">next-odd</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">rest</span> <span class="nv">start-time</span><span class="p">))</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">iter</span> <span class="nv">n</span> <span class="mi">3</span> <span class="p">(</span><span class="nf">runtime</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Result quite not support prediction, seems large number would have more overhead.</p>

<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="mi">1009</span>
</span><span class='line'><span class="mi">1013</span>
</span><span class='line'><span class="mi">1019</span>
</span><span class='line'><span class="mi">5000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">100000</span><span class="p">)</span>
</span><span class='line'><span class="mi">100003</span>
</span><span class='line'><span class="mi">100019</span>
</span><span class='line'><span class="mi">100043</span>
</span><span class='line'><span class="mi">7000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">1000003</span>
</span><span class='line'><span class="mi">1000033</span>
</span><span class='line'><span class="mi">1000037</span>
</span><span class='line'><span class="mi">9000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">10000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000019</span>
</span><span class='line'><span class="mi">10000079</span>
</span><span class='line'><span class="mi">10000103</span>
</span><span class='line'><span class="mi">15000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">100000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">100000007</span>
</span><span class='line'><span class="mi">100000037</span>
</span><span class='line'><span class="mi">100000039</span>
</span><span class='line'><span class="mi">24000</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.23</h4>

<p>Strange result. It&rsquo;s</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="mi">1009</span>
</span><span class='line'><span class="mi">1013</span>
</span><span class='line'><span class="mi">1019</span>
</span><span class='line'><span class="mi">5000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">10000</span><span class="p">)</span>
</span><span class='line'><span class="mi">10007</span>
</span><span class='line'><span class="mi">10009</span>
</span><span class='line'><span class="mi">10037</span>
</span><span class='line'><span class="mi">5000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">100000</span><span class="p">)</span>
</span><span class='line'><span class="mi">100003</span>
</span><span class='line'><span class="mi">100019</span>
</span><span class='line'><span class="mi">100043</span>
</span><span class='line'><span class="mi">9000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">10000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000019</span>
</span><span class='line'><span class="mi">10000079</span>
</span><span class='line'><span class="mi">10000103</span>
</span><span class='line'><span class="mi">36000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">100000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">100000007</span>
</span><span class='line'><span class="mi">100000037</span>
</span><span class='line'><span class="mi">100000039</span>
</span><span class='line'><span class="mi">21000</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.24</h4>

<p>This would decrease the running time, as the experiment result shows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="mi">1009</span>
</span><span class='line'><span class="mi">1013</span>
</span><span class='line'><span class="mi">1019</span>
</span><span class='line'><span class="mi">5000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">10000</span><span class="p">)</span>
</span><span class='line'><span class="mi">10007</span>
</span><span class='line'><span class="mi">10009</span>
</span><span class='line'><span class="mi">10037</span>
</span><span class='line'><span class="mi">5000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">100000</span><span class="p">)</span>
</span><span class='line'><span class="mi">100003</span>
</span><span class='line'><span class="mi">100019</span>
</span><span class='line'><span class="mi">100043</span>
</span><span class='line'><span class="mi">8000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">1000003</span>
</span><span class='line'><span class="mi">1000033</span>
</span><span class='line'><span class="mi">1000037</span>
</span><span class='line'><span class="mi">8000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">10000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">10000019</span>
</span><span class='line'><span class="mi">10000079</span>
</span><span class='line'><span class="mi">10000103</span>
</span><span class='line'><span class="mi">9000</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">search-for-primes</span> <span class="mi">100000000</span><span class="p">)</span>
</span><span class='line'><span class="mi">100000007</span>
</span><span class='line'><span class="mi">100000037</span>
</span><span class='line'><span class="mi">100000039</span>
</span><span class='line'><span class="mi">9000</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.25</h4>

<p><code>fast-expt</code>  would generate a very big number when exp are big, arbitrary precision number multiplication cost more time than small number remaindering.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="nv">exp</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nf">fast-expt</span> <span class="nv">base</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.26</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="nv">exp</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">((</span><span class="nb">even? </span><span class="nv">exp</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                    <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">* </span><span class="nv">base</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">- </span><span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                    <span class="nv">m</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>remainder</code> calls <code>expmod</code> recursively twice, which make s a o(log(n)) recursion to a 2<sup>0</sup> * log(2<sup>0</sup>) + 2<sup>1</sup> * log(2<sup>1</sup>) + 2<sup>2</sup> * log(2<sup>2</sup>) &hellip; which is o(n).</p>

<h4>1.27</h4>

<figure class='code'><figcaption><span>code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">carmichael-test</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">n</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">= </span><span class="p">(</span><span class="nf">expmod</span> <span class="nv">a</span> <span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">iter</span> <span class="nv">n</span> <span class="p">(</span><span class="nb">- </span><span class="nv">a</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">else </span><span class="nv">false</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">carmichael-test</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">carmichael-test</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">carmichael-test</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="no">#f</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">carmichael-test</span> <span class="mi">561</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">carmichael-test</span> <span class="mi">6601</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.28</h4>

<figure class='code'><figcaption><span>Miller-Rabin test</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="nv">exp</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">exp</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="p">((</span><span class="nf">and</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="nv">base</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">= </span><span class="nv">base</span> <span class="p">(</span><span class="nb">- </span><span class="nv">m</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">* </span><span class="nv">base</span> <span class="nv">base</span><span class="p">)</span> <span class="nv">m</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>         <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">((</span><span class="nb">even? </span><span class="nv">exp</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">exp</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                    <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">* </span><span class="nv">base</span> <span class="p">(</span><span class="nf">expmod</span> <span class="nv">base</span> <span class="p">(</span><span class="nb">- </span><span class="nv">exp</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>                    <span class="nv">m</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">miller-rabin-test</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">try-it</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">expmod</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">try-it</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nf">random</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sample output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">miller-rabin-test</span> <span class="mi">561</span><span class="p">)</span>
</span><span class='line'><span class="no">#f</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">miller-rabin-test</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">miller-rabin-test</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">miller-rabin-test</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="no">#f</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">miller-rabin-test</span> <span class="mi">6601</span><span class="p">)</span>
</span><span class='line'><span class="no">#t</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (02)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-02/"/>
    <updated>2014-01-18T23:46:53+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-02</id>
    <content type="html"><![CDATA[<h3>About</h3>

<p>From page 26 to page 47</p>

<h3>Notes</h3>

<ul>
<li>Scheme use <strong><a href="http://en.wikipedia.org/wiki/Lexical_scoping">lexical scope</a></strong>, as JavaScript did.</li>
<li>Linear iteration is more efficient than linear recursion.

<ul>
<li>Use a step counter and a accumulator to transform a linear recursion to a linear iteration. Which is what C, Pascal and Java do in their looping constructs.</li>
<li>Tail recursion made looping constructs a syntactic sugar.</li>
</ul>
</li>
<li>Linear iteration could be converted to o(log) iteration</li>
</ul>


<h3>Exercises</h3>

<h4>1.9</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">b</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">inc</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">dec</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">b</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">dec</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nf">inc</span> <span class="nv">b</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>First is recursive and second is iterative.</p>

<h4>1.10</h4>

<figure class='code'><figcaption><span>Ackermann&#8217;s function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">A</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">y</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">((</span><span class="nb">= </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">y</span><span class="p">))</span>
</span><span class='line'>        <span class="p">((</span><span class="nb">= </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">A</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">A</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>What&#8217;s the meaning of this?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">f</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">A</span> <span class="mi">0</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">g</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">A</span> <span class="mi">1</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">h</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">A</span> <span class="mi">2</span> <span class="nv">n</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Their plain scheme equivalent</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">f1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">g1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">exp </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">log </span><span class="mi">2</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span> <span class="c1">;; which is 2^n</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">h1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">exp </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">log </span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">g1</span> <span class="nv">n</span><span class="p">))))</span> <span class="c1">;; which is wtf</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.11</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">f</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">f-iter</span> <span class="nv">t1</span> <span class="nv">t2</span> <span class="nv">t3</span> <span class="nv">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">i</span> <span class="mi">3</span><span class="p">)</span> <span class="nv">t3</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">f-iter</span> <span class="nv">t2</span> <span class="nv">t3</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">+ </span><span class="nv">t3</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">t2</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">t1</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">- </span><span class="nv">i</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">if</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">3</span><span class="p">)</span> <span class="nv">n</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">f-iter</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.12</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="c1">;; p[1, 1] = 1</span>
</span><span class='line'><span class="c1">;; p[n, 1] = 1</span>
</span><span class='line'><span class="c1">;; p[n, n] = 1</span>
</span><span class='line'><span class="c1">;; p[i, j] = p[i-1, j-1] + p[i-1, j]</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">pascal</span> <span class="nv">i</span> <span class="nv">j</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">= </span><span class="nv">j</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">= </span><span class="nv">i</span> <span class="nv">j</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">pascal</span> <span class="p">(</span><span class="nb">- </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">j</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">pascal</span> <span class="p">(</span><span class="nb">- </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">j</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.13</h4>

<p>I have proved it but I&rsquo;m tired of typing it again.</p>

<h4>1.14</h4>

<p>I have drawed it but I&rsquo;m tired of typing it again.</p>

<h4>1.15</h4>

<ol>
<li>Five times</li>
<li>o(round(a))</li>
</ol>


<h4>1.16</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">expt1</span> <span class="nv">b</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; invariant -&gt; result * coeff ^ power = b ^ n</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">coeff</span> <span class="nv">power</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">= </span><span class="nv">power</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">= </span><span class="nv">power</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">result</span> <span class="nv">coeff</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">even? </span><span class="nv">power</span><span class="p">)</span> <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">* </span><span class="nv">coeff</span> <span class="nv">coeff</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">power</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">result</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">* </span><span class="nv">coeff</span> <span class="nv">coeff</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">power</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">result</span> <span class="nv">coeff</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">iter</span> <span class="nv">b</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.17</h4>

<figure class='code'><figcaption><span>recursive version</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">mul</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">= </span><span class="nv">b</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">= </span><span class="nv">a</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">((</span><span class="nb">even? </span><span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nf">mul</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">b</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="p">(</span><span class="nf">mul</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">b</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.18</h4>

<figure class='code'><figcaption><span>iterative</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">mul</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">; invaraint -&gt; result + num * times = a * b</span>
</span><span class='line'>  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">num</span> <span class="nv">times</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">= </span><span class="nv">times</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">result</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">= </span><span class="nv">times</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">result</span> <span class="nv">num</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">even? </span><span class="nv">times</span><span class="p">)</span> <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">num</span> <span class="nv">num</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">times</span> <span class="mi">2</span><span class="p">)</span> <span class="nv">result</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">num</span> <span class="nv">num</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">times</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">result</span> <span class="nv">num</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">iter</span> <span class="nv">a</span> <span class="nv">b</span> <span class="mi">0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.19</h4>

<p>It looks weird, but it&rsquo;s a matrix multiplication essentially.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">p_</span> <span class="o">=</span> <span class="n">p</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">q</span><span class="o">^</span><span class="mi">2</span>
</span><span class='line'><span class="n">q_</span> <span class="o">=</span> <span class="n">q</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>complete fast fibonacci code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fib</span> <span class="nv">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fib-iter</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="nv">n</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fib-iter</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">count</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>        <span class="p">((</span><span class="nb">even? </span><span class="nv">count</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">fib-iter</span> <span class="nv">a</span>
</span><span class='line'>                   <span class="nv">b</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">p</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">q</span> <span class="nv">q</span><span class="p">))</span>    <span class="c1">; compute p&#39;</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">q</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">p</span> <span class="nv">q</span><span class="p">))</span>  <span class="c1">; compute q&#39;</span>
</span><span class='line'>                   <span class="p">(</span><span class="nb">/ </span><span class="nv">count</span> <span class="mi">2</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">fib-iter</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">b</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">p</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">b</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="nv">q</span><span class="p">))</span>
</span><span class='line'>                        <span class="nv">p</span>
</span><span class='line'>                        <span class="nv">q</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">- </span><span class="nv">count</span> <span class="mi">1</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (01)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-01/"/>
    <updated>2014-01-12T23:52:38+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-01</id>
    <content type="html"><![CDATA[<h2>On Reading SICP (01)</h2>

<h3>What&rsquo;s this?</h3>

<p><strong>On Reading SICP</strong> is a serie of blogs while I am reading <a href="http://mitpress.mit.edu/sicp/">SICP</a>, including notes, thoughts and exercise solutions.</p>

<h3>About SICP</h3>

<p>I&rsquo;ve read first 2 chapters when I was in university. After reading Peter Norvig&rsquo;s <a href="http://www.amazon.com/review/R403HR4VL71K8">review</a> on this book, I decided to pick it up and read it through now.</p>

<blockquote><p> &ldquo;I read a draft version of the book around 1982, when I was in grad school, and it changed the way I think about my profession. If you&rsquo;re a thoughtful computer scientist (or want to be one), it will change your life too.&rdquo;</p></blockquote>

<p>I don&rsquo;t think I am a thoughtful computer scientist, but I think SICP could teach me some advanced programming skills.</p>

<blockquote><p>&ldquo;To use an analogy, if SICP were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century.&rdquo;</p></blockquote>

<p>That&rsquo;s exactly what I want to learn.</p>

<blockquote><p>&ldquo;Those who hate SICP think it doesn&rsquo;t deliver enough tips and tricks for the amount of time it takes to read. But if you&rsquo;re like me, you&rsquo;re not looking for one more trick, rather you&rsquo;re looking for a way of synthesizing what you already know, and building a rich framework onto which you can add new learning over a career. That&rsquo;s what SICP has done for me.&rdquo;</p></blockquote>

<p>I want to build a rich framework as well :)</p>

<h3>Notes</h3>

<blockquote><p>The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three:</p>

<p>1, Combing serveral simple ideas into one compound one, and thus all complex ideas are made.</p>

<p>2, The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations.</p>

<p>3, The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made.</p>

<p>John Locke, An Essay Concerning Human Understanding (1690)</p></blockquote>

<h3>Exercises</h3>

<h4>1.1 ~ 1.4</h4>

<p>Too trivial to write.</p>

<h4>1.5</h4>

<p>With the definition of</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span> <span class="p">(</span><span class="nf">p</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">test</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="mi">0</span> <span class="nv">y</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the interpreter is using applicative-order evaluation:</p>

<p><code>(test 0 (p))</code> will simply return 0</p>

<p>If the interpreter is using normal-order evalulation:</p>

<p><code>(test 0 (p))</code> will hang since interpreter will keep expanding (p) until it runs out of memory</p>

<h4>1.6</h4>

<p>Alyssa&rsquo;s <code>new-if</code> will hang because scheme uses applicative-order evaluation.
<code>sqrt-iter</code> will keep expanding <code>else-clause</code> in <code>(new-if predicate then-clause else-clause)</code> until it runs out of memory.</p>

<h4>1.7</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">good-enough?by-ratio</span> <span class="nv">curr</span> <span class="nv">next</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">abs </span><span class="p">(</span><span class="nb">- </span><span class="nv">next</span> <span class="nv">curr</span><span class="p">))</span> <span class="nv">curr</span><span class="p">)</span> <span class="mf">0.001</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sqrt-iter-by-change-ratio</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span>
</span><span class='line'>   <span class="p">(</span><span class="nf">good-enough?by-ratio</span> <span class="nv">guess</span> <span class="p">(</span><span class="nf">improve</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">))</span> <span class="nv">guess</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">sqrt-iter-by-change-ratio</span> <span class="p">(</span><span class="nf">improve</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sqrt2</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">sqrt-iter-by-change-ratio</span> <span class="mf">1.0</span> <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>sqrt2</code> works better for very small input, but badly for large input.</p>

<figure class='code'><figcaption><span>comparison between sqrt1 and sqrt2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">sqrt1</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="mf">2.0000060073048824</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">sqrt2</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="mf">2.0000060073048824</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">sqrt1</span> <span class="mf">0.02</span><span class="p">))</span>
</span><span class='line'><span class="mf">0.020858236746628435</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">sqrt2</span> <span class="mf">0.02</span><span class="p">))</span>
</span><span class='line'><span class="mf">0.02000882829073966</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">sqrt1</span> <span class="mi">2000</span><span class="p">))</span>
</span><span class='line'><span class="mf">2000.0000009062444</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">square</span> <span class="p">(</span><span class="nf">sqrt2</span> <span class="mi">2000</span><span class="p">))</span>
</span><span class='line'><span class="mf">2000.0851484886473</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1.8</h4>

<figure class='code'><figcaption><span>program</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">cube</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">good-enough-cubr?</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">abs </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">cube</span> <span class="nv">guess</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span> <span class="mf">0.001</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">improve-cubr</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">/ </span><span class="nv">x</span> <span class="p">(</span><span class="nf">square</span> <span class="nv">guess</span><span class="p">))</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">guess</span><span class="p">))</span> <span class="mi">3</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">cubr-iter</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">good-enough-cubr?</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">guess</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">cubr-iter</span> <span class="p">(</span><span class="nf">improve-cubr</span> <span class="nv">guess</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">cubr</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">cubr-iter</span> <span class="mf">1.0</span> <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scm'><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">cubr</span> <span class="mf">3.0</span><span class="p">)</span>
</span><span class='line'><span class="mf">1.4422497895989996</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">cube</span> <span class="p">(</span><span class="nf">cubr</span> <span class="mf">3.0</span><span class="p">))</span>
</span><span class='line'><span class="mf">3.0000013684348827</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Taste of Functional Programming in Java 7, Java 8 and C# 4]]></title>
    <link href="http://lucids.github.io/blog/a-taste-of-functional-programming-in-java-7/"/>
    <updated>2014-01-12T18:08:02+00:00</updated>
    <id>http://lucids.github.io/blog/a-taste-of-functional-programming-in-java-7</id>
    <content type="html"><![CDATA[<h2>Keywords</h2>

<p><strong>Java</strong>, <strong>C#, Java 8</strong>, <strong>Functional Programming</strong>, <strong><a href="https://code.google.com/p/guava-libraries/">Guava</a></strong></p>

<h2>Abstract</h2>

<p>By introducing a real-world problem, this article shows how Java 7 failed to solve it elegantly, how Java 8 make it better by the help of <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">lambda expression</a> and <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a>, and how C# 4 make it even better with the power of <a href="http://msdn.microsoft.com/en-us/library/bb397696.aspx">Anonymous Type</a> and <a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx">LINQ</a>.</p>

<h2>Problem</h2>

<h3>Definition</h3>

<p>We&rsquo;ve got some timing records from our log. These records are stored in a <code>Map&lt;String, Range&gt;</code>. Now we need to visualize them.</p>

<p><code>Range</code> is a closed-open range.</p>

<figure class='code'><figcaption><span>Definition of class Range</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Range</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">begin</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Range</span><span class="o">(</span><span class="kt">int</span> <span class="n">begin</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">begin</span> <span class="o">=</span> <span class="n">begin</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">end</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">length</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">end</span> <span class="o">-</span> <span class="n">begin</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>interface of this function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByName</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Example input</h3>

<figure class='code'><figcaption><span>example input</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;Action1&#39;</span> <span class="o">:</span> <span class="nx">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;Act2&#39;</span> <span class="o">:</span> <span class="nx">Range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;Action3&#39;</span> <span class="o">:</span> <span class="nx">Range</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;Trivial&#39;</span> <span class="o">:</span> <span class="nx">Range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">stepSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Expected output</h3>

<figure class='code'><figcaption><span>expected output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Action1:</span> <span class="o">*----</span>
</span><span class='line'>   <span class="nl">Act2:</span> <span class="o">-**--</span>
</span><span class='line'><span class="nl">Action3:</span> <span class="o">--***</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>NOTE</strong>: This example input will be used in the whole article.</p>

<h3>Requirements</h3>

<ol>
<li>Records in the output should keep an ascending order by its range begin value.</li>
<li><code>stepSize</code> is given to transform record range to chart range.</li>
<li>The <strong>n</strong>th symbol represents <code>Range(n * stepSize, (n + 1) * stepSize - 1)</code>.</li>
<li><code>-</code> represents idle, <code>*</code> represents busy. e.g. <code>Range(10, 30)</code> in the enclosing <code>Range(0, 50)</code> should be <code>-**--</code></li>
</ol>


<h3>Caveats</h3>

<ol>
<li>Trivial input(which can not make one step) should be removed.</li>
<li>Alignment is needed, as you see, <strong>Act2</strong> is right aligned with other record names.</li>
<li>Return an empty string if input is empty, or if all records are trivial.</li>
</ol>


<h2>How to solve it</h2>

<p>This article focuses on language features instead of algorithm design or problem analysis, so I won&rsquo;t go any further than listing steps below:</p>

<ol>
<li>Does some sanity check.</li>
<li>Transforms each record from data to appropriate string form like <code>Action1: -**--</code>.</li>
<li> Calculates how many symbols are needed for each entry

<ol>
<li>Gets the enclosing <code>Range</code> of all ranges</li>
<li>Transforms each record range(<code>Range(10, 30)</code>) into the actual range(<code>Range(1, 3)</code>) in the <code>String</code> form(<code>-**--</code>) from the enclosing range(<code>Range(0, 50)</code>) and stepSize(<code>10</code>).</li>
</ol>
</li>
<li> Gets the length of longest name of all records for further alignment.</li>
<li> Gets the proper string representation of each record.</li>
<li>Joins the string list by a line return separator and return.</li>
</ol>


<h2>Coding in &ldquo;old&rdquo; java way</h2>

<p>Firstly I&rsquo;ll implement the solution in Java 7 with the help of <a href="https://code.google.com/p/guava-libraries/">Guava</a>, the de facto java library of Google.</p>

<h3>1. Does some sanity check</h3>

<p><a href="https://code.google.com/p/guava-libraries/">Guava</a> provides some neat checks in <code>com.google.common.base.Preconditions.*</code>:</p>

<figure class='code'><figcaption><span>Sanity check using Preconditions in Guava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">Preconditions</span><span class="o">.</span><span class="na">checksNotNull</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">base</span><span class="o">.</span><span class="na">Preconditions</span><span class="o">.</span><span class="na">checksArgument</span><span class="o">;</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava7</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkNotNull</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="n">checkArgument</span><span class="o">(!</span><span class="n">data</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stepSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Transforms each record to appropriate string form</h3>

<h4>2.1. Calculates how many symbols are needed for each record</h4>

<h5>2.1.1. Gets the enclosing range of all ranges</h5>

<p>Calculating the enclosing <code>Range</code> is straightforward: Foreach the <code>Range</code> in  <code>Map&lt;String, Range&gt;</code> then take the minimum <code>begin</code> as enclosing begin and the maximum <code>end</code> as enclosing end.</p>

<figure class='code'><figcaption><span>Gets enclosing range in an imperative style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Range</span> <span class="nf">getEnclosingRange</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">ranges</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">enclosingBegin</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">enclosingEnd</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">(</span><span class="n">Range</span> <span class="n">range</span> <span class="o">:</span> <span class="n">ranges</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">range</span><span class="o">.</span><span class="na">begin</span> <span class="o">&lt;</span> <span class="n">enclosingBegin</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">enclosingBegin</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="na">begin</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">range</span><span class="o">.</span><span class="na">end</span> <span class="o">&gt;</span> <span class="n">enclosingEnd</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">enclosingEnd</span> <span class="o">=</span> <span class="n">range</span><span class="o">.</span><span class="na">end</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Range</span><span class="o">(</span><span class="n">enclosingBegin</span><span class="o">,</span> <span class="n">enclosingEnd</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although <a href="https://code.google.com/p/guava-libraries/">Guava</a> has a <a href="https://code.google.com/p/guava-libraries/wiki/OrderingExplained">Ordering</a> which can handle the min/max operation in a declarative way, but it won&rsquo;t simplify the code here:</p>

<figure class='code'><figcaption><span>Gets enclosing range in a declarative style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Range</span> <span class="nf">getEnclosingRange</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">ranges</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">enclosingBegin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Range</span> <span class="n">left</span><span class="o">,</span> <span class="n">Range</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">begin</span><span class="o">,</span> <span class="n">right</span><span class="o">.</span><span class="na">begin</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">max</span><span class="o">(</span><span class="n">ranges</span><span class="o">).</span><span class="na">begin</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">enclosingEnd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Range</span> <span class="n">left</span><span class="o">,</span> <span class="n">Range</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">end</span><span class="o">,</span> <span class="n">right</span><span class="o">.</span><span class="na">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">max</span><span class="o">(</span><span class="n">ranges</span><span class="o">).</span><span class="na">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Range</span><span class="o">(</span><span class="n">enclosingBegin</span><span class="o">,</span> <span class="n">enclosingEnd</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually it&rsquo;s even 2 lines more than the imperative style! But it is really not <a href="https://code.google.com/p/guava-libraries/">Guava</a>&rsquo;s fault. Java 7&rsquo;s verbose <em>annoynymous</em> class syntax made the should-be-clear code a mess.</p>

<p>I decided to use a consistent declarative style here, so I will keep the one with <a href="https://code.google.com/p/guava-libraries/wiki/OrderingExplained">Ordering</a>.</p>

<h5>2.1.2. Gets transformed entries from the enclosing range and stepSize</h5>

<h5>2.1.3. Filters trivial entries and sorts them by range&rsquo;s begin</h5>

<p><a href="https://code.google.com/p/guava-libraries/">Guava</a> provides <a href="https://code.google.com/p/guava-libraries/wiki/FunctionalExplained">FluentIterable</a> for processing collection in a &ldquo;fluent&rdquo; interface, so I combined the transforming, filtering and sorting together.</p>

<p>Firstly I used <code>FluentIterable#transform</code> to transform entries to the &ldquo;representing form&rdquo;(e.g. <code>Range(10,30)</code> with a enclosing <code>Range(0,50)</code> and stepSize <code>10</code> will be transformed into <code>Range(1,3)</code>, which matches its string form <code>-**--</code>)</p>

<figure class='code'><figcaption><span>transform entries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava7</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">Range</span> <span class="n">enclosingRange</span> <span class="o">=</span> <span class="n">getEnclosingRange</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">totalLength</span> <span class="o">=</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;</span> <span class="n">filteredAndSortedEntries</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>
</span><span class='line'>    <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;,</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">apply</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Range</span> <span class="n">range</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Maps</span><span class="o">.</span><span class="na">immutableEntry</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Range</span><span class="o">(</span>
</span><span class='line'>            <span class="o">(</span><span class="n">range</span><span class="o">.</span><span class="na">begin</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span>
</span><span class='line'>            <span class="o">(</span><span class="n">range</span><span class="o">.</span><span class="na">end</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">end</span><span class="o">)</span> <span class="o">/</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">})</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I used <code>FluentIterable#filter</code> to filter out trivial entries(<code>length &lt; 1</code>).</p>

<figure class='code'><figcaption><span>only keep non-trivial entries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally <code>FluentIterable#toSortedList</code> is used to get a sorted entry list, a custom <code>Comparator</code> is provided here to sort entries by range&rsquo;s begin value.</p>

<figure class='code'><figcaption><span>sort entries by Range#begin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="o">.</span><span class="na">toSortedList</span><span class="o">(</span><span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">,</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">,</span> <span class="n">right</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the enty list might be empty after filtering, I added a early return here. It also prevents Exception from possible <code>Ordering#max</code> invoking.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">filteredAndSortedEntries</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.2. Gets the length of longest name for further alignment.</h4>

<p>Before getting the string list, we need to get the longest name&rsquo;s length so we can make a <strong>right</strong> alignment.</p>

<p><a href="https://code.google.com/p/guava-libraries/wiki/OrderingExplained">Ordering</a> was used to get the longest length, it should be noticed that <code>Ordering#max</code> would throw an Exception if input interables are empty.</p>

<figure class='code'><figcaption><span>Gets length of the longest name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava7</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">longestNameLength</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">,</span> <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">(),</span> <span class="n">right</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">max</span><span class="o">(</span><span class="n">filteredAndSortedEntries</span><span class="o">).</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.3. Gets the proper string representation of each entry.</h4>

<p><code>FluentIterable#transform</code> is used here to transform entry list to string list.</p>

<figure class='code'><figcaption><span>Transforms each entry to string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava7</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">barLength</span> <span class="o">=</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">;</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">barTextList</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">filteredAndSortedEntries</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;,</span> <span class="n">String</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%&quot;</span> <span class="o">+</span> <span class="n">longestNameLength</span> <span class="o">+</span> <span class="s">&quot;s :&quot;</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">)</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">barLength</span> <span class="o">-</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">toList</span><span class="o">();</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Joins the Strings by a line return separator and return.</h3>

<p>Java 7 does not have a decent <code>String.join(...)</code> method, fortunately we get <a href="https://code.google.com/p/guava-libraries/wiki/StringsExplained#Joiner">Joiner</a> in <a href="https://code.google.com/p/guava-libraries/">Guava</a>.</p>

<figure class='code'><figcaption><span>Joins string using Joiner in Guava</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromMap</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="s">&quot;\r\n&quot;</span><span class="o">).</span><span class="na">join</span><span class="o">(</span><span class="n">barTextList</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Whole code</h3>

<p>Now we can take a look of the whole code in Java 7.</p>

<figure class='code'><figcaption><span>Great Java 7 solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Range</span> <span class="nf">getEnclosingRange</span><span class="o">(</span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">ranges</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">enclosingBegin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Range</span> <span class="n">left</span><span class="o">,</span> <span class="n">Range</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">begin</span><span class="o">,</span> <span class="n">right</span><span class="o">.</span><span class="na">begin</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">min</span><span class="o">(</span><span class="n">ranges</span><span class="o">).</span><span class="na">begin</span><span class="o">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">enclosingEnd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Range</span> <span class="n">left</span><span class="o">,</span> <span class="n">Range</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">end</span><span class="o">,</span> <span class="n">right</span><span class="o">.</span><span class="na">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">max</span><span class="o">(</span><span class="n">ranges</span><span class="o">).</span><span class="na">end</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nf">Range</span><span class="o">(</span><span class="n">enclosingBegin</span><span class="o">,</span> <span class="n">enclosingEnd</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartTextJava7</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checksNotNull</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="n">checksArgument</span><span class="o">(!</span><span class="n">data</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stepSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Range</span> <span class="n">enclosingRange</span> <span class="o">=</span> <span class="n">getEnclosingRange</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;</span> <span class="n">filteredAndSortedEntries</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span>
</span><span class='line'>  <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;,</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">apply</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Range</span> <span class="n">range</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Maps</span><span class="o">.</span><span class="na">immutableEntry</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="k">new</span> <span class="n">Range</span><span class="o">(</span>
</span><span class='line'>          <span class="o">(</span><span class="n">range</span><span class="o">.</span><span class="na">begin</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">,</span>
</span><span class='line'>          <span class="o">(</span><span class="n">range</span><span class="o">.</span><span class="na">end</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">filter</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">toSortedList</span><span class="o">(</span><span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">,</span> <span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">,</span> <span class="n">right</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">filteredAndSortedEntries</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">longestNameLength</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ordering</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">left</span><span class="o">,</span> <span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Range</span><span class="o">&gt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">(),</span> <span class="n">right</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}.</span><span class="na">max</span><span class="o">(</span><span class="n">filteredAndSortedEntries</span><span class="o">).</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">barLength</span> <span class="o">=</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">;</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">barTextList</span> <span class="o">=</span> <span class="n">FluentIterable</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">filteredAndSortedEntries</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">transform</span><span class="o">(</span><span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;,</span> <span class="n">String</span><span class="o">&gt;(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%&quot;</span> <span class="o">+</span> <span class="n">longestNameLength</span> <span class="o">+</span> <span class="s">&quot;s :&quot;</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">)</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">barLength</span> <span class="o">-</span> <span class="n">input</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">end</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}).</span><span class="na">toList</span><span class="o">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="s">&quot;\r\n&quot;</span><span class="o">).</span><span class="na">join</span><span class="o">(</span><span class="n">barTextList</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I must admit it&rsquo;s freaking long(with over <strong>60</strong> lines) and unreadable(the spiky bracket hurt my eye badly &ndash;_&ndash;). Yes, I can break it into more small methods. Then there are more boilderplate code. I&rsquo;ll do the refactoring only if I get paid per line.</p>

<p>We know Java 8 introduced <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">lambda expression</a> and <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a>, let&rsquo;s see what Java 8 can do.</p>

<h2>Coding in &ldquo;new&rdquo; java way</h2>

<h3>1. Does some sanity check</h3>

<p>No fancy tricks here, same as always.</p>

<figure class='code'><figcaption><span>Sanity check</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkNotNull</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="n">checkArgument</span><span class="o">(!</span><span class="n">data</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stepSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Transforms each record to appropriate string form</h3>

<h4>2.1. Calculates how many symbols are needed for each record</h4>

<h5>2.1.1. Gets the enclosing range of all ranges</h5>

<p>With the help of <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a> and lambda expression, the code gets more simplified and readable.</p>

<p><code>r -&gt; r.begin</code> is the shorthand form lambda in java 8(who says C# copies java?), it&rsquo;s equivalent to <code>(Range r) -&gt; { return r.begin; }</code> here, I skipped the type declaration and brackets for simplicity.</p>

<p><code>Integer::compare</code> is another nice java 8 feature called <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Method Reference</a>. It allows you to call an existing method by name so you don&rsquo;t have to write <code>(i1, i2) -&gt; Integer.compare(r1, r2)</code> just to wrap <code>Integer.compare</code>.</p>

<p>You may notice the <code>&lt;Integer&gt;</code> declaration before <code>map</code> method, it&rsquo;s pretty annoying but it&rsquo;s indispensable here since I would get a compiliation error without it. I wonder why they can&rsquo;t also do some type inference here. Weird.</p>

<p>You need to call <code>get</code> method to get the value since <code>min</code> returns an <code>Optional&lt;T&gt;</code> here, I suspect they borrowed the idea from <a href="https://code.google.com/p/guava-libraries/wiki/UsingAndAvoidingNullExplained#Optional">Optional</a> in <a href="https://code.google.com/p/guava-libraries/">Guava</a>.</p>

<figure class='code'><figcaption><span>Gets enclosing range using lambda and stream API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">Range</span> <span class="n">enclosingRange</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Range</span><span class="o">(</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">begin</span><span class="o">).</span><span class="na">min</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">end</span><span class="o">).</span><span class="na">max</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found a more succinct way later, it seems <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a> provides specific API for primitive types.</p>

<figure class='code'><figcaption><span>Primitive type specific stream API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">Range</span> <span class="n">enclosingRange</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Range</span><span class="o">(</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">begin</span><span class="o">).</span><span class="na">min</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">(),</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">end</span><span class="o">).</span><span class="na">max</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">());</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h5>2.1.2. Gets transformed entries from the enclosing range and stepSize</h5>

<h5>2.1.3. Filters trivial entries and sorts them by range&rsquo;s begin</h5>

<p>This is almost a java 8 &ldquo;translation&rdquo; the java 7 version. Thanks to <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">lambda expression</a>, the <em>annoynymous</em> class is no longer needed.</p>

<p><code>Stream#collect(Collectors#toList())</code> here is used to transform <code>Stream&lt;T&gt;</code> to <code>List&lt;T&gt;</code>, <code>Collectors</code> is a big class provides a variety of <code>Collector</code>s, which including <code>toMap</code>, <code>toSet</code>, <code>joining</code> and other useful utilities.</p>

<figure class='code'><figcaption><span>transforming, filtering and sorting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;</span> <span class="n">recordList</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">entrySet</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">Maps</span><span class="o">.</span><span class="na">immutableEntry</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Range</span><span class="o">((</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">,</span>
</span><span class='line'>            <span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">end</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">lhv</span><span class="o">,</span> <span class="n">rhv</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">lhv</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">,</span> <span class="n">rhv</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">recordList</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.2. Gets the length of longest name for further alignment.</h4>

<p>That&rsquo;s pretty straightforward.</p>

<figure class='code'><figcaption><span>Gets length of the longest name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">longestNameLength</span> <span class="o">=</span> <span class="n">recordList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">()).</span><span class="na">max</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>  <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.3. Gets the proper string representation of each record.</h4>

<h3>3. Joins the string list by a line return separator and return.</h3>

<p>Also straight forward. <code>Stream#map</code> is used to transform entries into strings.</p>

<p>Since there&rsquo;re no null element, <a href="https://code.google.com/p/guava-libraries/wiki/StringsExplained#Joiner">Joiner</a> would be an overkill. A <code>Collectors.joining</code> would suffice.</p>

<figure class='code'><figcaption><span>Gets string result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">barLength</span> <span class="o">=</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">recordList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%&quot;</span> <span class="o">+</span> <span class="n">longestNameLength</span> <span class="o">+</span> <span class="s">&quot;s: &quot;</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">)</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">barLength</span> <span class="o">-</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">end</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;\r\n&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Whole code</h3>

<figure class='code'><figcaption><span>Succinct Java 8 Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getBarChartFromRangesByNameJava8</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">checkNotNull</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>  <span class="n">checkArgument</span><span class="o">(!</span><span class="n">data</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stepSize</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="n">Range</span> <span class="n">enclosingRange</span> <span class="o">=</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">Range</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">begin</span><span class="o">).</span><span class="na">min</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">(),</span>
</span><span class='line'>          <span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">end</span><span class="o">).</span><span class="na">max</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;</span> <span class="n">recordList</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">entrySet</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.&lt;</span><span class="n">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Range</span><span class="o">&gt;&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">Maps</span><span class="o">.</span><span class="na">immutableEntry</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nf">Range</span><span class="o">((</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">,</span>
</span><span class='line'>            <span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">end</span> <span class="o">-</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">begin</span><span class="o">)</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">)))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">lhv</span><span class="o">,</span> <span class="n">rhv</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">lhv</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">,</span> <span class="n">rhv</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">recordList</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">longestNameLength</span> <span class="o">=</span> <span class="n">recordList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">()).</span><span class="na">max</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">barLength</span> <span class="o">=</span> <span class="n">enclosingRange</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">/</span> <span class="n">stepSize</span><span class="o">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">recordList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>      <span class="o">.&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%&quot;</span> <span class="o">+</span> <span class="n">longestNameLength</span> <span class="o">+</span> <span class="s">&quot;s: &quot;</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">begin</span><span class="o">)</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;*&quot;</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">length</span><span class="o">())</span>
</span><span class='line'>          <span class="o">+</span> <span class="n">Strings</span><span class="o">.</span><span class="na">repeat</span><span class="o">(</span><span class="s">&quot;-&quot;</span><span class="o">,</span> <span class="n">barLength</span> <span class="o">-</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">end</span><span class="o">))</span>
</span><span class='line'>      <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">&quot;\r\n&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java 8 simpilfies this task greatly by the help of <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">lambda expression</a> and <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a>. The code lines count drops significantly from over 60 lines to 26 lines by the elimination of <em>annoynymous</em> classes.</p>

<p>I have to admit Java 8 made considerable progress over Java 7. But it <strong>COULD</strong> be even better. Let&rsquo;s see how C# tackle this.</p>

<h2>What about C#?</h2>

<h3>1. Does some sanity check</h3>

<p>Raise an <code>ArgumentException</code> if something went crazy.</p>

<figure class='code'><figcaption><span>Sanity check</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateBarChartText</span><span class="p">(</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">Range</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">data</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">stepSize</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Transforms each Entry to appropriate String form</h3>

<h4>2.1. Calculates how many symbols are needed for each Entry</h4>

<h5>2.1.1. Gets the enclosing Range of all ranges</h5>

<p>With the help of <a href="http://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx">Property Syntax</a> and <a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx">LINQ</a>. One line would suffice.</p>

<figure class='code'><figcaption><span>Gets enclosing range in one line</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="n">Range</span> <span class="n">enclosingRange</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Values</span><span class="p">.</span><span class="n">Min</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Begin</span><span class="p">),</span> <span class="n">data</span><span class="p">.</span><span class="n">Values</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">End</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is much more succinct than the Java 8 version:</p>

<figure class='code'><figcaption><span>Not so succinct Java 8</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Range</span> <span class="n">enclosingRange</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">Range</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">begin</span><span class="o">).</span><span class="na">min</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">(),</span>
</span><span class='line'>        <span class="n">data</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">end</span><span class="o">).</span><span class="na">max</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>I am very <a name="surprised">surprised</a> that there is not a <code>Max(selector)</code> equivalence in Java 8(e.g. <code>Stream#max(Function&lt;T, ? extends Comparable&gt;)</code>), which means you can only write <code>stream.&lt;Integer&gt;map(obj -&gt; obj.intValue).max(Integer::compare)</code> in Java 8 instead of the much more succint <code>stream.max(obj -&gt; obj.intValue)</code>, again, weird.</p>

<p>It&rsquo;s not hard to write a Java 8 version of <code>Max(selector)</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">R</span> <span class="kd">extends</span> <span class="n">Comparable</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">R</span><span class="o">&gt;&gt;</span> <span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">maxBySelector</span><span class="o">(</span><span class="n">Stream</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">stream</span><span class="o">,</span>
</span><span class='line'>    <span class="n">Function</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="n">selector</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">stream</span><span class="o">.</span><span class="na">max</span><span class="o">((</span><span class="n">t1</span><span class="o">,</span> <span class="n">t2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">selector</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">t1</span><span class="o">).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">selector</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">t2</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then test it with a selector <code>s -&gt; s.length()</code>:</p>

<figure class='code'><figcaption><span>test failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maxBySelector</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">stream</span><span class="o">(),</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then something more weird happens: A compiler error! It seems eclipse does not handle lambdas well at this moment.</p>

<figure class='code'><figcaption><span>compiler failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Internal</span> <span class="n">compiler</span> <span class="nl">error:</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NullPointerException</span> <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">eclipse</span><span class="o">.</span><span class="na">jdt</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">compiler</span><span class="o">.</span><span class="na">ast</span><span class="o">.</span><span class="na">LambdaExpression</span><span class="o">.</span><span class="na">analyseCode</span><span class="o">(</span><span class="n">LambdaExpression</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">395</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I made type parameter explicit but it still not compile.</p>

<figure class='code'><figcaption><span>eclipse failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span><span class="n">maxBySelector</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">stream</span><span class="o">(),</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally it worked after I added class name.</p>

<figure class='code'><figcaption><span>readability failure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Sample</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span><span class="n">maxBySelector</span><span class="o">(</span><span class="n">data</span><span class="o">.</span><span class="na">keySet</span><span class="o">().</span><span class="na">stream</span><span class="o">(),</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it looks a mess. I suspect they don&rsquo;t provide a <code>Max(selector)</code> just because some compiler did not support it, damn.</p>

<h5>2.1.2. Gets transformed records from the enclosing range and stepSize</h5>

<h5>2.1.3. Filters trivial records and sorts them by range&rsquo;s begin value</h5>

<p>I don&rsquo;t like <code>KeyValuePair&lt;T&gt;</code> here since there&rsquo;s no meaning on <code>Key</code> and <code>Value</code>, <a href="http://msdn.microsoft.com/en-us/library/bb397696.aspx">Anonymous Type</a> and <a href="http://msdn.microsoft.com/en-us/library/bb383973.aspx">Implicit Type</a> in C# provide a handy way to create instances of a temporary type. And code becomes more readable than Java 8 version(Which gets numerous spiky brackets).</p>

<figure class='code'><figcaption><span>Transforming, filtering and sorting</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateBarChartText</span><span class="p">(</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">Range</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">records</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Name</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Range</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Range</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Begin</span> <span class="p">-</span> <span class="n">enclosingRange</span><span class="p">.</span><span class="n">Begin</span><span class="p">)</span> <span class="p">/</span> <span class="n">stepSize</span><span class="p">,</span>
</span><span class='line'>            <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">End</span> <span class="p">-</span> <span class="n">enclosingRange</span><span class="p">.</span><span class="n">Begin</span><span class="p">)</span> <span class="p">/</span> <span class="n">stepSize</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">Where</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">).</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">records</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, an <code>OrderBy(selector)</code> is missing in Java 8, although Java 8 provides a parameterless natural  <code>Stream#sorted()</code>, but <code>stream.&lt;Integer&gt;map(r -&gt; r.intValue).sorted()</code> is still messier than <code>stream.sorted(r -&gt; r.intValue)</code>. Maybe they will say it&rsquo;s for performance &ndash;_&ndash;</p>

<h4>2.2. Gets the length of longest name for further alignment.</h4>

<figure class='code'><figcaption><span>Gets length of the longest name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="kt">int</span> <span class="n">longestNameLength</span> <span class="p">=</span> <span class="n">records</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is far more succint than the Java 8 version:</p>

<figure class='code'><figcaption><span>Not so succinct Java 8</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">longestNameLength</span> <span class="o">=</span> <span class="n">recordList</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">length</span><span class="o">()).</span><span class="na">max</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compare</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.3. Gets the proper string representation of each record.</h4>

<h3>3. Joins the string list by a line return separator and return.</h3>

<p>Almost identical to the Java 8 version.</p>

<figure class='code'><figcaption><span>Gets string result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateBarChartText</span><span class="p">(</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">Range</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">records</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0,&quot;</span> <span class="p">+</span> <span class="n">longestNameLength</span> <span class="p">+</span> <span class="s">&quot;}: &quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">+</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Begin</span><span class="p">)</span>
</span><span class='line'>            <span class="p">+</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class='line'>            <span class="p">+</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="p">,</span> <span class="n">totalCount</span> <span class="p">-</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Whole code</h3>

<figure class='code'><figcaption><span>Even more better C# solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GenerateBarChartText</span><span class="p">(</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">Range</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stepSize</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">data</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">data</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">stepSize</span> <span class="p">&lt;=</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Range</span> <span class="n">enclosingRange</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Values</span><span class="p">.</span><span class="n">Min</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">Begin</span><span class="p">),</span> <span class="n">data</span><span class="p">.</span><span class="n">Values</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">End</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">records</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&gt;</span> <span class="k">new</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Name</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span>
</span><span class='line'>        <span class="n">Range</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Range</span><span class="p">((</span><span class="n">p</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Begin</span> <span class="p">-</span> <span class="n">enclosingRange</span><span class="p">.</span><span class="n">Begin</span><span class="p">)</span> <span class="p">/</span> <span class="n">stepSize</span><span class="p">,</span>
</span><span class='line'>            <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">End</span> <span class="p">-</span> <span class="n">enclosingRange</span><span class="p">.</span><span class="n">Begin</span><span class="p">)</span> <span class="p">/</span> <span class="n">stepSize</span><span class="p">),</span>
</span><span class='line'>    <span class="p">}).</span><span class="n">Where</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">).</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span><span class="p">).</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">records</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">longestNameLength</span> <span class="p">=</span> <span class="n">records</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">totalCount</span> <span class="p">=</span> <span class="n">enclosingRange</span><span class="p">.</span><span class="n">Length</span> <span class="p">/</span> <span class="n">stepSize</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;\r\n&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="n">records</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0,&quot;</span> <span class="p">+</span> <span class="n">longestNameLength</span> <span class="p">+</span> <span class="s">&quot;}: &quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>            <span class="p">+</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Begin</span><span class="p">)</span>
</span><span class='line'>            <span class="p">+</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
</span><span class='line'>            <span class="p">+</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="p">,</span> <span class="n">totalCount</span> <span class="p">-</span> <span class="n">i</span><span class="p">.</span><span class="n">Range</span><span class="p">.</span><span class="n">Length</span><span class="p">)));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find lots of similarities between Java 8 and C# 4, but C# code looks more readable, since C# has a more dedicated type inference mechanism(which eliminates almost all explicit type parameters) and a more succinct API.</p>

<p>They have more brilliant language designers and compiler designers.</p>

<h2>Conclusions</h2>

<p><strong>DISCLAIMER</strong>: Following conclusions are only based on the case in this article.</p>

<h3>Java 7</h3>

<p>Totally a mess and outdated, a typical <strong>write more do less</strong> programming language. It <em>supports</em> functional programming <strong>ACCIDENTALLY</strong> by a shitty verbose <em>annoynymous</em> class, which would make things even more complicated.</p>

<p>In my perspective:</p>

<blockquote><p>Programming in plain Java 7 is like you are talking to a half <strong>deaf also dumb</strong> ass that you have to shout every words in three times, then you begin to feel if you are dumb too.</p></blockquote>

<h3>Java 8</h3>

<p>A big leap since Java 7, the introduction of <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">lambda expression</a> releases old java users from the shitty verbose <em>annoynymous</em> class syntax, and <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a> makes collection operations easiser.</p>

<p>However, Java 8 is still far away from usability:</p>

<ul>
<li>Java 8 might not deaf but still dumb, you still have to say everything twice. It has type inference, but only work in limited case so code like <code>Map&lt;String, String&gt; map = Maps.&lt;String,String&gt;builder().put(x).build()</code> and <code>stream.&lt;String&gt;map(i -&gt; Integer.toString(i))</code> is still avoidable.</li>
<li>The <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Java Stream API</a> is still verbose and confusing

<ul>
<li>It did not have any <code>minBy(selector)</code> or <code>toSortedBy(selector)</code>, and you can hardly implement one yourself(<a href="#surprised">Surprising</a>).</li>
<li>Stream is <strong>NOT</strong> stateless, you can <strong>NOT</strong> reuse a stream which had been applied a teminate operation(e.g. <code>stream.count()</code> would fail after you called <code>stream.max()</code>), maybe that has a performance gain, but it looks weird.</li>
<li>You have to call <code>get</code> on every reducing operation since they returns a <code>Optional&lt;T&gt;</code>, which makes code more verbose.(That might be nit, but I think a <code>maxOrDefault</code> is better in this case)</li>
<li>It uses a <code>Collector</code> to make <code>Stream</code> into other type like <code>String</code>, <code>List</code> and <code>Map</code>, which produces very weird API: You have to use <code>stream.collect(Collectors.toList())</code> instead of <code>stream.toList()</code>, <code>stream.collect(Collectors.joining("\n"))</code> instead of <code>stream.joining("\n")</code></li>
</ul>
</li>
<li>Very limited compiler support, my Eclipse often hangs or pops up an alert window when writing lambdas in stream API. Also code suggestion works badly in lambda expressions.</li>
</ul>


<p>Which draws a frustrating conclusion:</p>

<blockquote><p>It took these java designers over 5 years effort to make something that can not even beat a 5-years-ago C# 3 on collection operations.</p></blockquote>

<h3>C# 4</h3>

<p>In this case, C# 4 is the undisputed winner. Powered by <a href="http://msdn.microsoft.com/en-us/library/bb397926.aspx">LINQ</a>, <a href="http://msdn.microsoft.com/en-us/library/bb397696.aspx">Anonymous Type</a> and <a href="http://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx">Property Syntax</a>, C# allows you to finish the task fluently and produce more readable code. Since I did not touch any C# 4 features, so this conclusion also works in C# 3.</p>

<p>But</p>

<blockquote><p>the awful fact is I may have to use java 7 for many years, sometimes I hope I never learnt other languages, so I could feel like I&rsquo;m using the best programming languages now. &ndash;_&ndash;</p></blockquote>

<h2>References</h2>

<ol>
<li>Lambda expressions in Java 8 Tutorials: <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a></li>
<li>Java 8 Stream API: <a href="http://www.slideshare.net/BjrnKimminich/java-8-streams">http://www.slideshare.net/BjrnKimminich/java-8-streams</a></li>
<li>guava-libraries: <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">https://code.google.com/p/guava-libraries/wiki/GuavaExplained</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Article]]></title>
    <link href="http://lucids.github.io/blog/first-article/"/>
    <updated>2014-01-07T00:11:23+00:00</updated>
    <id>http://lucids.github.io/blog/first-article</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
