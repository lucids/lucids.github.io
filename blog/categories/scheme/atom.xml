<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scheme | Lucids]]></title>
  <link href="http://lucids.github.io/blog/categories/scheme/atom.xml" rel="self"/>
  <link href="http://lucids.github.io/"/>
  <updated>2014-01-18T23:47:36+00:00</updated>
  <id>http://lucids.github.io/</id>
  <author>
    <name><![CDATA[Lucids]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (02)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-02/"/>
    <updated>2014-01-18T23:46:53+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-02</id>
    <content type="html"><![CDATA[<h3>About</h3>

<p>From page 26 to page 47</p>

<h3>Notes</h3>

<ul>
<li>Scheme use <strong><a href="http://en.wikipedia.org/wiki/Lexical_scoping">lexical scope</a></strong>, as JavaScript did.</li>
<li>Linear iteration is more efficient than linear recursion.

<ul>
<li>Use a step counter and a accumulator to transform a linear recursion to a linear iteration. Which is what C, Pascal and Java do in their looping constructs.</li>
<li>Tail recursion made looping constructs a syntactic sugar.</li>
</ul>
</li>
<li>Linear iteration could be converted to o(log) iteration</li>
</ul>


<h3>Exercises</h3>

<h4>1.9</h4>

<p>```scm
(define (+ a b)
  (if (= a 0)</p>

<pre><code>  b
  (inc (+ (dec a) b))))
</code></pre>

<p>(define (+ a b)
  (if (= a 0)</p>

<pre><code>  b
  (+ (dec a) (inc b))))
</code></pre>

<p>```</p>

<p>First is recursive and second is iterative.</p>

<h4>1.10</h4>

<p>```scm Ackermann&rsquo;s function
(define (A x y)
  (cond ((= y 0) 0)</p>

<pre><code>    ((= x 0) (* 2 y))
    ((= y 1) 2)
    (else (A (- x 1)
             (A x (- y 1))))))
</code></pre>

<p>```</p>

<p><code>scm What's the meaning of this?
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
</code></p>

<p><code>scm Their plain scheme equivalent
(define (f1 n) (* 2 n))
(define (g1 n) (exp (* (log 2) n))) ;; which is 2^n
(define (h1 n) (exp (* (log 2) (g1 n)))) ;; which is wtf
</code></p>

<h4>1.11</h4>

<p>```scm
(define (f n)
  (define (f-iter t1 t2 t3 i)</p>

<pre><code>(if (= i 3) t3
    (f-iter t2 t3 
            (+ t3 (* 2 t2) (* 3 t1))
            (- i 1))))
</code></pre>

<p>  (if
   (&lt; n 3) n
   (f-iter 1 2 3 n)</p>

<pre><code>))
</code></pre>

<p>```</p>

<h4>1.12</h4>

<p>```scm
;; p[1, 1] = 1
;; p[n, 1] = 1
;; p[n, n] = 1
;; p[i, j] = p[i-1, j-1] + p[i-1, j]</p>

<p>(define (pascal i j)
  (cond</p>

<pre><code>((= j 1) 1)
((= i j) 1)
(else (+ (pascal (- i 1) (- j 1)) (pascal (- i 1) j)))
))
</code></pre>

<p>```</p>

<h4>1.13</h4>

<p>I have proved it but I&rsquo;m tired of typing it again.</p>

<h4>1.14</h4>

<p>I have drawed it but I&rsquo;m tired of typing it again.</p>

<h4>1.15</h4>

<ol>
<li>Five times</li>
<li>o(round(a))</li>
</ol>


<h4>1.16</h4>

<p>```scm
(define (expt1 b n)
  ; invariant &ndash;> result * coeff ^ power = b ^ n
  (define (iter coeff power result)</p>

<pre><code>(cond
  ((= power 0) result)
  ((= power 1) (* result coeff))
  ((even? power) (iter (* coeff coeff) (/ power 2) result))
  (else (iter (* coeff coeff) (/ (- power 1) 2) (* result coeff)))
  ))
</code></pre>

<p>  (iter b n 1))
```</p>

<h4>1.17</h4>

<p>```scm recursive version
(define (mul a b)
  (cond</p>

<pre><code>((= b 0) 0)
((= a 0) 0)
((even? b) (mul (+ a a) (/ b 2)))
(else (+ a (mul (+ a a) (/ (- b 1) 2))))
))
</code></pre>

<p>```</p>

<h4>1.18</h4>

<p>```scm iterative
(define (mul a b)
  ; invaraint &ndash;> result + num * times = a * b
  (define (iter num times result)</p>

<pre><code>(cond
  ((= times 0) result)
  ((= times 1) (+ result num))
  ((even? times) (iter (+ num num) (/ times 2) result))
  (else (iter (+ num num) (/ (- times 1) 2) (+ result num)))
  ))
</code></pre>

<p>  (iter a b 0))
```</p>

<h4>1.19</h4>

<p>It looks weird, but it&rsquo;s a matrix multiplication essentially.</p>

<p><code>python
p_ = p^2 + q^2
q_ = q^2 + 2 * p * q
</code></p>

<p>```scm complete fast fibonacci code
(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)</p>

<pre><code>    ((even? count)
     (fib-iter a
               b
               (+ (* p p) (* q q))    ; compute p'
               (+ (* q q) (* 2 p q))  ; compute q'
               (/ count 2)))
    (else (fib-iter (+ (* b q) (* a q) (* a p))
                    (+ (* b p) (* a q))
                    p
                    q
                    (- count 1)))))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (01)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-01/"/>
    <updated>2014-01-12T23:52:38+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-01</id>
    <content type="html"><![CDATA[<h2>On Reading SICP (01)</h2>

<h3>What&rsquo;s this?</h3>

<p><strong>On Reading SICP</strong> is a serie of blogs while I am reading <a href="http://mitpress.mit.edu/sicp/">SICP</a>, including notes, thoughts and exercise solutions.</p>

<h3>About SICP</h3>

<p>I&rsquo;ve read first 2 chapters when I was in university. After reading Peter Norvig&rsquo;s <a href="http://www.amazon.com/review/R403HR4VL71K8">review</a> on this book, I decided to pick it up and read it through now.</p>

<blockquote><p> &ldquo;I read a draft version of the book around 1982, when I was in grad school, and it changed the way I think about my profession. If you&rsquo;re a thoughtful computer scientist (or want to be one), it will change your life too.&rdquo;</p></blockquote>

<p>I don&rsquo;t think I am a thoughtful computer scientist, but I think SICP could teach me some advanced programming skills.</p>

<blockquote><p>&ldquo;To use an analogy, if SICP were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century.&rdquo;</p></blockquote>

<p>That&rsquo;s exactly what I want to learn.</p>

<blockquote><p>&ldquo;Those who hate SICP think it doesn&rsquo;t deliver enough tips and tricks for the amount of time it takes to read. But if you&rsquo;re like me, you&rsquo;re not looking for one more trick, rather you&rsquo;re looking for a way of synthesizing what you already know, and building a rich framework onto which you can add new learning over a career. That&rsquo;s what SICP has done for me.&rdquo;</p></blockquote>

<p>I want to build a rich framework as well :)</p>

<h3>Notes</h3>

<blockquote><p>The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three:</p>

<p>1, Combing serveral simple ideas into one compound one, and thus all complex ideas are made.</p>

<p>2, The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations.</p>

<p>3, The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made.</p>

<p>John Locke, An Essay Concerning Human Understanding (1690)</p></blockquote>

<h3>Exercises</h3>

<h4>1.1 ~ 1.4</h4>

<p>Too trivial to write.</p>

<h4>1.5</h4>

<p>With the definition of</p>

<p><code>scm
(define (p) (p))
(define (test x y) (if (= x 0) 0 y))
</code></p>

<p>If the interpreter is using applicative-order evaluation:</p>

<p><code>(test 0 (p))</code> will simply return 0</p>

<p>If the interpreter is using normal-order evalulation:</p>

<p><code>(test 0 (p))</code> will hang since interpreter will keep expanding (p) until it runs out of memory</p>

<h4>1.6</h4>

<p>Alyssa&rsquo;s <code>new-if</code> will hang because scheme uses applicative-order evaluation.
<code>sqrt-iter</code> will keep expanding <code>else-clause</code> in <code>(new-if predicate then-clause else-clause)</code> until it runs out of memory.</p>

<h4>1.7</h4>

<p><code>scm
(define (good-enough?by-ratio curr next)
  (&lt; (/ (abs (- next curr)) curr) 0.001))
(define (sqrt-iter-by-change-ratio guess x)
  (if
   (good-enough?by-ratio guess (improve guess x)) guess
   (sqrt-iter-by-change-ratio (improve guess x) x)))
(define (sqrt2 x) (sqrt-iter-by-change-ratio 1.0 x))
</code></p>

<p><code>sqrt2</code> works better for very small input, but badly for large input.</p>

<p>```scm comparison between sqrt1 and sqrt2</p>

<blockquote><p>(square (sqrt1 2))
2.0000060073048824
(square (sqrt2 2))
2.0000060073048824
(square (sqrt1 0.02))
0.020858236746628435
(square (sqrt2 0.02))
0.02000882829073966
(square (sqrt1 2000))
2000.0000009062444
(square (sqrt2 2000))
2000.0851484886473
```</p></blockquote>

<h4>1.8</h4>

<p>```scm program
(define (cube x) (<em> x x x))
(define (good-enough-cubr? guess x)
  (&lt; (abs (&ndash; (cube guess) x)) 0.001))
(define (improve-cubr guess x)
  (/ (+ (/ x (square guess)) (</em> 2 guess)) 3))
(define (cubr-iter guess x)
  (if (good-enough-cubr? guess x) guess</p>

<pre><code>  (cubr-iter (improve-cubr guess x) x)))
</code></pre>

<p>(define (cubr x) (cubr-iter 1.0 x))
```</p>

<p>```scm output</p>

<blockquote><p>(cubr 3.0)
1.4422497895989996
(cube (cubr 3.0))
3.0000013684348827
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
