<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SICP | Lucids]]></title>
  <link href="http://lucids.github.io/blog/categories/sicp/atom.xml" rel="self"/>
  <link href="http://lucids.github.io/"/>
  <updated>2014-02-15T21:31:18+00:00</updated>
  <id>http://lucids.github.io/</id>
  <author>
    <name><![CDATA[Lucids]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (04)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-04/"/>
    <updated>2014-02-15T21:28:07+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-04</id>
    <content type="html"><![CDATA[<p>On Reading SICP (04)</p>

<h3>About</h3>

<p>From page 48 to page 66.</p>

<p>From exercise 1.29 to exercise 1.34.</p>

<h3>Notes</h3>

<p>I like this section, the notion of <code>accumulation</code> and <code>filter</code> is introduced, which are my favourite functional programming tools.</p>

<p>Also, the idea, that <code>let</code> is syntactical sugar of <code>lambda</code>, is pretty interesting.</p>

<p><code>scm let and lambda
(let ((var1 exp1)
(var2 exp2)
...
(varn expn))
body)
; is the equivalent of
((lambda (var1 var2 ... varn) body)
exp1
exp2
...
expn)
</code></p>

<p><code>scm lambda equivalent
</code></p>

<h3>Exercises</h3>

<h4>1.29</h4>

<p>In order to reuse <code>sum</code>, I define <code>fk</code>, which may be a little weird.</p>

<p>```scm program
(define (sum term a next b)
(if (> a b)
0
(+ (term a)
(sum term (next a) next b))))</p>

<p>(define (square x)(* x x))</p>

<p>(define (integral f a b dx)
(define (add-dx x) (+ x dx))
(* (sum f (+ a (/ dx 2.0)) add-dx b) dx))</p>

<p>(define (simpson-integral f a b n)
(let ((h (/ (&ndash; b a) n)))
(define (yk k) (+ a (<em> k h)))
(define (inc x) (+ x 1))
(define (fk x)
(cond
((= x 0) (f a))
((= x n) (f b))
((even? x) (</em> 2 (f (yk x))))
(else (<em> 4 (f (yk x))))))
(</em> (sum fk 0 inc n) (/ (&ndash; b a) 3.0 n))
))
```</p>

<p>It`s more precise indeed, wow!</p>

<p>```scm comparison</p>

<blockquote><p>(simpson-integral square 0 1 100)
0.3333333333333333
(integral square 0 1 0.01)
0.33332500000000054
```</p></blockquote>

<h4>1.30</h4>

<p><code>scm
(define (sum term a next b)
(define (iter a result)
(if (&gt; a b) result
(iter (next a) (+ result (term a)))))
(iter a 0))
</code></p>

<h4>1.31</h4>

<p>It can be generated by <code>s/+/*/ s/0/1/ s/sum/prod/</code>.</p>

<p>```scm
(define (prod-rec term a next b)
(if (> a b) 1
(* (term a) (prod-rec term (next a) next b))))</p>

<p>(define (prod-iter term a next b)
(define (iter a result)
(if (> a b) result
(iter (next a) (* result (term a)))))
(iter a 1))
```</p>

<p>```scm sample output</p>

<blockquote><p>(prod-rec (lambda (x) x) 1 (lambda (x) (+ x 1)) 5)
120
(prod-iter (lambda (x) x) 1 (lambda (x) (+ x 1)) 5)
120
```</p></blockquote>

<h4>1.32</h4>

<p>```scm
(define (accum-rec op init term a next b)
(if (> a b) init
(op (term a) (accum-rec op init term (next a) next b))))</p>

<p>(define (accum-iter op init term a next b)
(define (iter a result)
(if (> a b) result
(iter (next a) (op (term a) result))))
(iter a init))
```</p>

<p>```scm sample output</p>

<blockquote><p>(accum-rec + 0 (lambda (x) x) 1 (lambda (x) (+ 1 x)) 10)
55
(accum-iter + 0 (lambda (x) x) 1 (lambda (x) (+ 1 x)) 10)
55
```</p></blockquote>

<h4>1.33</h4>

<p>Finally I don`t have to write recursive and iterative version at once.</p>

<p><code>scm
(define (filtered-accum op init term a next b filter)
(define (iter a result)
(cond ((&gt; a b) result)
((filter a) (iter (next a) (op (term a) result)))
(else (iter (next a) result))))
(iter a init))
</code></p>

<p>```scm sample output</p>

<blockquote><p>(filtered-accum + 0 (lambda (x) x) 1 (lambda (x) (+ x 1)) 10 even?)
30
```</p></blockquote>

<p><code>scm sum of the squares of the prime numbers in the interval a to b
(define (sum-prime-squares a b)
(filtered-accum
+ 0 (lambda (x) (* x x)) a (lambda (x) (+ x 1)) b prime?))
</code></p>

<p><code>scm product of all positive integers i &lt; n such that GCD(i, n) = 1
(define (prod-relative-primes-less-than n)
(filtered-accum
* 1 (lambda (x) x)
1 (lambda (x) (+ x 1)) (- n 1)
(lambda (x) (= (gcd x n) 1))))
</code></p>

<p>```scm sample output</p>

<blockquote><p>(sum-prime-squares 1 10)
87
(prod-relative-primes-less-than 10)
189
```</p></blockquote>

<h4>1.34</h4>

<p>Given</p>

<p><code>scm
(define (f g) (g 2))
</code></p>

<p>which <code>f</code> would receive a function <code>g</code> then return the result that apply <code>g</code> with <code>2</code>.</p>

<p>Since scheme uses applicative-order evaluation, I think <code>(f f)</code> would become <code>(f 2)</code> then <code>(2 2)</code>, since <code>2</code> is a number instead of a function, it would pop up an error here.</p>

<p>Then my thought was proved :)</p>

<p>```scm experiment</p>

<blockquote><p>(define (f g) (g 2))
(f 2)
. . application: not a procedure;
expected a procedure that can be applied to arguments
given: 2
arguments&hellip;:
2
```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (03)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-03/"/>
    <updated>2014-01-20T23:45:15+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-03</id>
    <content type="html"><![CDATA[<p>On Reading SICP (03)</p>

<h3>About</h3>

<p>From page 48 to page 56.</p>

<p>From exercise 1.19 to exercise 1.28.</p>

<h3>Notes</h3>

<p>This part is a little boring, since I don&rsquo;t like fiddling with numbers.</p>

<p>I wrote exercise solutions in <a href="http://racket-lang.org/">DrRacket</a>, then I found some functions missing(like <code>runtime</code>), fortunately there is a SICP-specific racket package called <a href="http://www.neilvandyke.org/racket-sicp/">Racket Sicp</a>, many thanks to PLaneT.</p>

<h3>Exercises</h3>

<h4>1.20</h4>

<p>```scm
(define (gcd a b)
  (if (= b 0)</p>

<pre><code>a
(gcd b (remainder a b))))
</code></pre>

<p>```</p>

<p>Normal-order evaluation won&rsquo;t fully unwarp expression until all operation become primitive, so <code>remainder</code> will be called mannnnnny times.</p>

<p>```scm (gcd 206 40)
; normal-order evaluation
(gcd 206 40)
(gcd 40 (remainder 206 40))
(gcd (remainder 206 40) (remainder 40 (remainder 206 40)))
(gcd (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
(gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))
(gcd 2 0)
2</p>

<p>; applicative-order evaluation
(gcd 206 40)
(gcd 40 6)
(gcd 6 4)
(gcd 4 2)
(gcd 2 0)
2
```</p>

<h4>1.21</h4>

<p>```scm</p>

<blockquote><p>(smallest-divisor 19)
19
(smallest-divisor 199)
199
(smallest-divisor 1999)
1999
; which give me an illusion that all 199..9 are primes, but&hellip;
(smallest-divisor 19999)
7
; never trust your intutions, especially on maths.
```</p></blockquote>

<h4>1.22</h4>

<p>```scm
(define (search-for-primes n)
  (define (next-odd n) (if (odd? n) (+ n 2) (+ n 1)))
  (define (iter n rest start-time)</p>

<pre><code>(cond ((= rest 0) 
       (newline)
       (display (- (runtime) start-time)))
      ((prime? n)  (newline)
                   (display n)
                   (iter (next-odd n) (- rest 1) start-time))
      (else (iter (next-odd n) rest start-time))
    )
)
</code></pre>

<p>  (iter n 3 (runtime)))
```</p>

<p>Result quite not support prediction, seems large number would have more overhead.</p>

<p>```scm result</p>

<blockquote><p>(search-for-primes 1000)
1009
1013
1019
5000
(search-for-primes 100000)
100003
100019
100043
7000
(search-for-primes 1000000)
1000003
1000033
1000037
9000
(search-for-primes 10000000)
10000019
10000079
10000103
15000
(search-for-primes 100000000)
100000007
100000037
100000039
24000
```</p></blockquote>

<h4>1.23</h4>

<p>Strange result. It&rsquo;s</p>

<p>```scm</p>

<blockquote><p>(search-for-primes 1000)
1009
1013
1019
5000
(search-for-primes 10000)
10007
10009
10037
5000
(search-for-primes 100000)
100003
100019
100043
9000
(search-for-primes 10000000)
10000019
10000079
10000103
36000
(search-for-primes 100000000)
100000007
100000037
100000039
21000
```</p></blockquote>

<h4>1.24</h4>

<p>This would decrease the running time, as the experiment result shows.</p>

<p>```scm</p>

<blockquote><p>(search-for-primes 1000)
1009
1013
1019
5000
(search-for-primes 10000)
10007
10009
10037
5000
(search-for-primes 100000)
100003
100019
100043
8000
(search-for-primes 1000000)
1000003
1000033
1000037
8000
(search-for-primes 10000000)
10000019
10000079
10000103
9000
(search-for-primes 100000000)
100000007
100000037
100000039
9000
```</p></blockquote>

<h4>1.25</h4>

<p><code>fast-expt</code>  would generate a very big number when exp are big, arbitrary precision number multiplication cost more time than small number remaindering.</p>

<p><code>scm
(define (expmod base exp m)
  (remainder (fast-expt base exp) m))
</code></p>

<h4>1.26</h4>

<p>```scm
(define (expmod base exp m)
  (cond ((= exp 0) 1)</p>

<pre><code>    ((even? exp)
     (remainder (* (expmod base (/ exp 2) m)
                   (expmod base (/ exp 2) m))
                m))
    (else
     (remainder (* base (expmod base (- exp 1) m))
                m))))
</code></pre>

<p>```</p>

<p><code>remainder</code> calls <code>expmod</code> recursively twice, which make s a o(log(n)) recursion to a 2<sup>0</sup> * log(2<sup>0</sup>) + 2<sup>1</sup> * log(2<sup>1</sup>) + 2<sup>2</sup> * log(2<sup>2</sup>) &hellip; which is o(n).</p>

<h4>1.27</h4>

<p>```scm code
(define (carmichael-test n)
  (define (iter n a)</p>

<pre><code>(cond ((= a 0) true)
      ((= (expmod a n n) a) (iter n (- a 1)))
      (else false))
</code></pre>

<p>```</p>

<p>```scm result</p>

<blockquote><p>(carmichael-test 2)</p>

<h1>t</h1>

<p>(carmichael-test 3)</p>

<h1>t</h1>

<p>(carmichael-test 10)</p>

<h1>f</h1>

<p>(carmichael-test 561)</p>

<h1>t</h1>

<p>(carmichael-test 6601)</p>

<h1>t</h1>

<p>```</p></blockquote>

<h4>1.28</h4>

<p>```scm Miller-Rabin test
(define (expmod base exp m)
  (cond ((= exp 0) 1)</p>

<pre><code>    ((and
      (not (= base 1))
      (not (= base (- m 1)))
      (= (remainder (* base base) m) 1))
     0)
    ((even? exp)
     (remainder (square (expmod base (/ exp 2) m))
                m))
    (else
     (remainder (* base (expmod base (- exp 1) m))
                m))))
</code></pre>

<p>(define (miller-rabin-test n)
  (define (try-it a)</p>

<pre><code>(= (expmod a (- n 1) n) 1))
</code></pre>

<p>  (try-it (+ 1 (random (&ndash; n 1)))))
```</p>

<p>```scm sample output</p>

<blockquote><p>(miller-rabin-test 561)</p>

<h1>f</h1>

<p>(miller-rabin-test 3)</p>

<h1>t</h1>

<p>(miller-rabin-test 7)</p>

<h1>t</h1>

<p>(miller-rabin-test 8)</p>

<h1>f</h1>

<p>(miller-rabin-test 6601)</p>

<h1>t</h1>

<p>```</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (02)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-02/"/>
    <updated>2014-01-18T23:46:53+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-02</id>
    <content type="html"><![CDATA[<h3>About</h3>

<p>From page 26 to page 47</p>

<h3>Notes</h3>

<ul>
<li>Scheme use <strong><a href="http://en.wikipedia.org/wiki/Lexical_scoping">lexical scope</a></strong>, as JavaScript did.</li>
<li>Linear iteration is more efficient than linear recursion.

<ul>
<li>Use a step counter and a accumulator to transform a linear recursion to a linear iteration. Which is what C, Pascal and Java do in their looping constructs.</li>
<li>Tail recursion made looping constructs a syntactic sugar.</li>
</ul>
</li>
<li>Linear iteration could be converted to o(log) iteration</li>
</ul>


<h3>Exercises</h3>

<h4>1.9</h4>

<p>```scm
(define (+ a b)
  (if (= a 0)</p>

<pre><code>  b
  (inc (+ (dec a) b))))
</code></pre>

<p>(define (+ a b)
  (if (= a 0)</p>

<pre><code>  b
  (+ (dec a) (inc b))))
</code></pre>

<p>```</p>

<p>First is recursive and second is iterative.</p>

<h4>1.10</h4>

<p>```scm Ackermann&rsquo;s function
(define (A x y)
  (cond ((= y 0) 0)</p>

<pre><code>    ((= x 0) (* 2 y))
    ((= y 1) 2)
    (else (A (- x 1)
             (A x (- y 1))))))
</code></pre>

<p>```</p>

<p><code>scm What's the meaning of this?
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
</code></p>

<p><code>scm Their plain scheme equivalent
(define (f1 n) (* 2 n))
(define (g1 n) (exp (* (log 2) n))) ;; which is 2^n
(define (h1 n) (exp (* (log 2) (g1 n)))) ;; which is wtf
</code></p>

<h4>1.11</h4>

<p>```scm
(define (f n)
  (define (f-iter t1 t2 t3 i)</p>

<pre><code>(if (= i 3) t3
    (f-iter t2 t3 
            (+ t3 (* 2 t2) (* 3 t1))
            (- i 1))))
</code></pre>

<p>  (if
   (&lt; n 3) n
   (f-iter 1 2 3 n)</p>

<pre><code>))
</code></pre>

<p>```</p>

<h4>1.12</h4>

<p>```scm
;; p[1, 1] = 1
;; p[n, 1] = 1
;; p[n, n] = 1
;; p[i, j] = p[i-1, j-1] + p[i-1, j]</p>

<p>(define (pascal i j)
  (cond</p>

<pre><code>((= j 1) 1)
((= i j) 1)
(else (+ (pascal (- i 1) (- j 1)) (pascal (- i 1) j)))
))
</code></pre>

<p>```</p>

<h4>1.13</h4>

<p>I have proved it but I&rsquo;m tired of typing it again.</p>

<h4>1.14</h4>

<p>I have drawed it but I&rsquo;m tired of typing it again.</p>

<h4>1.15</h4>

<ol>
<li>Five times</li>
<li>o(round(a))</li>
</ol>


<h4>1.16</h4>

<p>```scm
(define (expt1 b n)
  ; invariant &ndash;> result * coeff ^ power = b ^ n
  (define (iter coeff power result)</p>

<pre><code>(cond
  ((= power 0) result)
  ((= power 1) (* result coeff))
  ((even? power) (iter (* coeff coeff) (/ power 2) result))
  (else (iter (* coeff coeff) (/ (- power 1) 2) (* result coeff)))
  ))
</code></pre>

<p>  (iter b n 1))
```</p>

<h4>1.17</h4>

<p>```scm recursive version
(define (mul a b)
  (cond</p>

<pre><code>((= b 0) 0)
((= a 0) 0)
((even? b) (mul (+ a a) (/ b 2)))
(else (+ a (mul (+ a a) (/ (- b 1) 2))))
))
</code></pre>

<p>```</p>

<h4>1.18</h4>

<p>```scm iterative
(define (mul a b)
  ; invaraint &ndash;> result + num * times = a * b
  (define (iter num times result)</p>

<pre><code>(cond
  ((= times 0) result)
  ((= times 1) (+ result num))
  ((even? times) (iter (+ num num) (/ times 2) result))
  (else (iter (+ num num) (/ (- times 1) 2) (+ result num)))
  ))
</code></pre>

<p>  (iter a b 0))
```</p>

<h4>1.19</h4>

<p>It looks weird, but it&rsquo;s a matrix multiplication essentially.</p>

<p><code>python
p_ = p^2 + q^2
q_ = q^2 + 2 * p * q
</code></p>

<p>```scm complete fast fibonacci code
(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)</p>

<pre><code>    ((even? count)
     (fib-iter a
               b
               (+ (* p p) (* q q))    ; compute p'
               (+ (* q q) (* 2 p q))  ; compute q'
               (/ count 2)))
    (else (fib-iter (+ (* b q) (* a q) (* a p))
                    (+ (* b p) (* a q))
                    p
                    q
                    (- count 1)))))
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Reading SICP (01)]]></title>
    <link href="http://lucids.github.io/blog/on-reading-sicp-01/"/>
    <updated>2014-01-12T23:52:38+00:00</updated>
    <id>http://lucids.github.io/blog/on-reading-sicp-01</id>
    <content type="html"><![CDATA[<h2>On Reading SICP (01)</h2>

<h3>What&rsquo;s this?</h3>

<p><strong>On Reading SICP</strong> is a serie of blogs while I am reading <a href="http://mitpress.mit.edu/sicp/">SICP</a>, including notes, thoughts and exercise solutions.</p>

<h3>About SICP</h3>

<p>I&rsquo;ve read first 2 chapters when I was in university. After reading Peter Norvig&rsquo;s <a href="http://www.amazon.com/review/R403HR4VL71K8">review</a> on this book, I decided to pick it up and read it through now.</p>

<blockquote><p> &ldquo;I read a draft version of the book around 1982, when I was in grad school, and it changed the way I think about my profession. If you&rsquo;re a thoughtful computer scientist (or want to be one), it will change your life too.&rdquo;</p></blockquote>

<p>I don&rsquo;t think I am a thoughtful computer scientist, but I think SICP could teach me some advanced programming skills.</p>

<blockquote><p>&ldquo;To use an analogy, if SICP were about automobiles, it would be for the person who wants to know how cars work, how they are built, and how one might design fuel-efficient, safe, reliable vehicles for the 21st century.&rdquo;</p></blockquote>

<p>That&rsquo;s exactly what I want to learn.</p>

<blockquote><p>&ldquo;Those who hate SICP think it doesn&rsquo;t deliver enough tips and tricks for the amount of time it takes to read. But if you&rsquo;re like me, you&rsquo;re not looking for one more trick, rather you&rsquo;re looking for a way of synthesizing what you already know, and building a rich framework onto which you can add new learning over a career. That&rsquo;s what SICP has done for me.&rdquo;</p></blockquote>

<p>I want to build a rich framework as well :)</p>

<h3>Notes</h3>

<blockquote><p>The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three:</p>

<p>1, Combing serveral simple ideas into one compound one, and thus all complex ideas are made.</p>

<p>2, The second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations.</p>

<p>3, The third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made.</p>

<p>John Locke, An Essay Concerning Human Understanding (1690)</p></blockquote>

<h3>Exercises</h3>

<h4>1.1 ~ 1.4</h4>

<p>Too trivial to write.</p>

<h4>1.5</h4>

<p>With the definition of</p>

<p><code>scm
(define (p) (p))
(define (test x y) (if (= x 0) 0 y))
</code></p>

<p>If the interpreter is using applicative-order evaluation:</p>

<p><code>(test 0 (p))</code> will simply return 0</p>

<p>If the interpreter is using normal-order evalulation:</p>

<p><code>(test 0 (p))</code> will hang since interpreter will keep expanding (p) until it runs out of memory</p>

<h4>1.6</h4>

<p>Alyssa&rsquo;s <code>new-if</code> will hang because scheme uses applicative-order evaluation.
<code>sqrt-iter</code> will keep expanding <code>else-clause</code> in <code>(new-if predicate then-clause else-clause)</code> until it runs out of memory.</p>

<h4>1.7</h4>

<p><code>scm
(define (good-enough?by-ratio curr next)
  (&lt; (/ (abs (- next curr)) curr) 0.001))
(define (sqrt-iter-by-change-ratio guess x)
  (if
   (good-enough?by-ratio guess (improve guess x)) guess
   (sqrt-iter-by-change-ratio (improve guess x) x)))
(define (sqrt2 x) (sqrt-iter-by-change-ratio 1.0 x))
</code></p>

<p><code>sqrt2</code> works better for very small input, but badly for large input.</p>

<p>```scm comparison between sqrt1 and sqrt2</p>

<blockquote><p>(square (sqrt1 2))
2.0000060073048824
(square (sqrt2 2))
2.0000060073048824
(square (sqrt1 0.02))
0.020858236746628435
(square (sqrt2 0.02))
0.02000882829073966
(square (sqrt1 2000))
2000.0000009062444
(square (sqrt2 2000))
2000.0851484886473
```</p></blockquote>

<h4>1.8</h4>

<p>```scm program
(define (cube x) (<em> x x x))
(define (good-enough-cubr? guess x)
  (&lt; (abs (&ndash; (cube guess) x)) 0.001))
(define (improve-cubr guess x)
  (/ (+ (/ x (square guess)) (</em> 2 guess)) 3))
(define (cubr-iter guess x)
  (if (good-enough-cubr? guess x) guess</p>

<pre><code>  (cubr-iter (improve-cubr guess x) x)))
</code></pre>

<p>(define (cubr x) (cubr-iter 1.0 x))
```</p>

<p>```scm output</p>

<blockquote><p>(cubr 3.0)
1.4422497895989996
(cube (cubr 3.0))
3.0000013684348827
```</p></blockquote>
]]></content>
  </entry>
  
</feed>
